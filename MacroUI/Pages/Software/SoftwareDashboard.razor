@page "/softwaredashboard";

<h3>Software Dashboard</h3>

@using DataAccess
@using DataAccess.Models
@using MacroUI.Models
@using BlazorTable

@inject ISoftwareData _Softwaredb



@if (software is null)
{
    <p><em>Loading...</em></p>
}
else
{
    <Table TableItem="@SoftwareModel" Items="software" PageSize="15">
        <Column TableItem="SoftwareModel" Title="Manufacturer" Field="@(x => x.Manufacturer)" Sortable="true" Filterable="true" Width="10%" />
        <Column TableItem="SoftwareModel" Title="Software Title" Field="@(x => x.SoftwareTitle)" Sortable="true" Filterable="true" Width="10%" />
        <Column TableItem="SoftwareModel" Title="Assigned To" Field="@(x => x.AssignedTo)" Sortable="true" Filterable="true" Width="10%" />
        <Column TableItem="SoftwareModel" Title="Purchase Order" Field="@(x => x.PurchaseOrder)" Sortable="true" Filterable="true" Width="10%" />
        <Column TableItem="SoftwareModel" Title="License Type" Field="@(x => x.LicenseType)" Sortable="true" Filterable="true" Width="10%" />
        <Column TableItem="SoftwareModel" Title="License Key" Field="@(x => x.LicenseKey)" Sortable="true" Filterable="true" Width="10%" />
        <Column TableItem="SoftwareModel" Title="Purchase Date" Field="@(x => x.PurchaseDate)" Sortable="true" Filterable="true" Width="10%" />
        <Column TableItem="SoftwareModel" Title="Supported" Field="@(x => x.Supported)" Sortable="true" Filterable="true" Width="5%" />
        <Column TableItem="SoftwareModel" Title="Support Expiration" Field="@(x => x.SupportExp)" Sortable="true" Filterable="true" Width="10%" />
        <Column TableItem="SoftwareModel" Title="Total Keys" Field="@(x => x.TotalKeys)" Sortable="true" Filterable="true" Width="5%" />
        <Column TableItem="SoftwareModel" Title="Used Keys" Field="@(x => x.UsedKeys)" Sortable="true" Filterable="true" Width="5%" />
        <Column TableItem="SoftwareModel" Title="Date Added" Field="@(x => x.Added)" Sortable="true" Filterable="true" Width="5%" />
        <Pager ShowPageNumber="true" ShowTotalCount="true"/>
    </Table>
}

<div class="card">
    <a id="add"></a>
    <div class="card-header">
        Add a License...
    </div>
    <div class="card-body">
        <EditForm Model="@newLicense" OnValidSubmit="@InsertLicense">
            <DataAnnotationsValidator />
            <ValidationSummary />
            <InputText id="Manufacturer" @bind-Value="@newLicense.Manufacturer" placeholder="Manufacturer" />
            <InputText id="SoftwareTitle" @bind-Value="@newLicense.SoftwareTitle" placeholder="Software Title" />
            <InputText id="AssignedTo" @bind-Value="@newLicense.AssignedTo" placeholder="Assigned To" /><br /><br />
            <InputText id="PurchaseOrder" @bind-Value="@newLicense.PurchaseOrder" placeholder="Purchase Order" />
            <InputText id="LicenseType" @bind-Value="@newLicense.LicenseType" placeholder="License Type" />
            <InputText id="LicenseKey" @bind-Value="@newLicense.LicenseKey" placeholder="License Key" /><br /><br />
            <label for"PurchaseDate">Purchase Date: </label>
            <InputDate id="PurchaseDate" @bind-Value="@newLicense.PurchaseDate"/><br/>
            <label for"Supported">Supported: </label>
            <InputCheckbox id="Supported" @bind-Value="@newLicense.Supported" /><br />
            <label for"SupportExp">Support Expiration: </label>
            <InputDate id="SupportExp" @bind-Value="@newLicense.SupportExp" /><br />
            <label for"TotalKeys">Total Keys: </label>
            <InputNumber id="TotalKeys" @bind-Value="@newLicense.TotalKeys" /><br />
            <label for"UsedKeys">Used Keys: </label>
            <InputNumber id="UsedKeys" @bind-Value="@newLicense.UsedKeys" /><br />
            <br />
            <button class="btn btn-primary" type="submit">Add</button>
        </EditForm>
    </div>
</div>

@code {
    private List<SoftwareModel> software;
    private SoftwareDisplayModel newLicense = new SoftwareDisplayModel();

    protected override async Task OnInitializedAsync()
    {
        software = await _Softwaredb.GetSoftware();
    }

    private async Task InsertLicense()
    {
        List<SoftwareModel> currentSoftware = await _Softwaredb.GetSoftware();
        int index = currentSoftware.Count();
        SoftwareModel sm = new SoftwareModel
        {
            ID = index,
            Manufacturer = newLicense.Manufacturer,
            SoftwareTitle = newLicense.SoftwareTitle,
            AssignedTo = newLicense.AssignedTo,
            PurchaseOrder = newLicense.PurchaseOrder,
            LicenseType = newLicense.LicenseType,
            PurchaseDate = newLicense.PurchaseDate,
            Supported = newLicense.Supported,
            SupportExp = newLicense.SupportExp,
            TotalKeys = newLicense.TotalKeys,
            UsedKeys = newLicense.UsedKeys,
            LicenseKey = newLicense.LicenseKey,
            Added = DateTime.Now
        };

        await _Softwaredb.InsertSoftware(sm);
        software.Add(sm);
        newLicense = new SoftwareDisplayModel();
    }
}
